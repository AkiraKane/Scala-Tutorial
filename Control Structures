IF...ELSE
Any programming language provides if..else construct for decision making.
 
if statement:
if(Boolean_expression)
{
   // Statements will execute if the Boolean expression is true
}
Ex:
object Test {
   def main(args: Array[String]) {
      var x = 10;

      if( x < 20 ){
         println("This is if statement");
      }
   }
}

if..else statement:
if(Boolean_expression){
   //Executes when the Boolean expression is true
}else{
   //Executes when the Boolean expression is false
}

if..else if..else statement:
if(Boolean_expression 1){
   //Executes when the Boolean expression 1 is true
}else if(Boolean_expression 2){
   //Executes when the Boolean expression 2 is true
}else if(Boolean_expression 3){
   //Executes when the Boolean expression 3 is true
}else {
   //Executes when the none of the above condition is true.
}

Nested if..else statement: Having if or if..else statements inside another if or else if.
if(Boolean_expression 1){
   //Executes when the Boolean expression 1 is true
   if(Boolean_expression 2){
      //Executes when the Boolean expression 2 is true
   }
}

LOOP TYPES:
Loop: executes statements desired number of times. performs repetitive tasks.
Scala has support for following loops: while, do..while, for

Loop control statements: They change execution from normal sequence. Scala doesn't support break or continue statements as Java does
but starting from Scala 2.8 version there is a way to break the loops.

While loop:
Syntax:
while (condition)
{ statement (s);
}
Ex:
while( a < 20 ){
         println( "Value of a: " + a );
         a = a + 1;
      }
      
While loop checks the condition at the top of the loop whereas do..while loop checks the condition at the bottom of the loop.

do....while

do {
statement (s);
}while (condition);
The do..while loop executes the statements atleast once irrespective of the condition.

Ex:
 do{
         println( "Value of a: " + a );
         a = a + 1;
      }while( a < 20 )

For Loop:

for(i <- 1 to 10) {
    println("i is " + i);
}

The above for loop iterates 10 times and for each iteration and for each iteration assigns the val i the next number in the range.
i <- construct is called a generator. In each iteration i is initalized with a value.
1 to 10 is called Range type. It returns a range containing the values from 1 to 10.

to vs until

for(i <- 1 until 10) {
    println("i is " + i);
}

The above for loop iterated 9 times excluding the upper boundary 10.

Iterating Collections and Arrays:
Array or collections can be iterated using the for loop as-

var myArray : Array[String] = new Array[String](10);


for(i <- 0 until myArray.length){
    myArray(i) = "value is: " + i;
}

for(value : String <- myArray ) {
    println(value);
}

In the above for loops, the first for loop intitalizes each element in the array to the text "value is: " 
with index appended.
The third for loop interates the array using the generator <-. In each iteration, next element in the array is 
assigned to value and finally printed to the console.

Multiple For loop Filters:
Nested Iteration:



































